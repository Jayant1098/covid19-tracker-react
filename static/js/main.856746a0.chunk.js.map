{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Charts/Charts.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","Components/Charts/Charts.module.css","Components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","deaths","recovered","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","modifiedURL","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCoutries","setFetchedCountries","getCountries","FormControl","formControl","NativeSelect","onChange","e","target","key","App","state","fetchedData","setState","this","src","alt","image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.856746a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3lW5H\",\"card\":\"Cards_card__1_kt9\",\"deaths\":\"Cards_deaths__3pCyF\",\"recovered\":\"Cards_recovered__11i7N\",\"infected\":\"Cards_infected__1xskg\"};","import React from 'react';\r\nimport { Card, Grid, Typography, CardContent} from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\nimport styles from './Cards.module.css'\r\nimport 'typeface-roboto';\r\n\r\nconst Cards = ({ data : { confirmed, deaths, recovered, lastUpdate }}) => {\r\n    if(!confirmed){\r\n        return 'Loading...'\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\" >\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp \r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={1.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='subtitle2'>Number of active cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp \r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={1.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='subtitle2'>Number of recovered cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp \r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={1.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='subtitle2'>Number of deaths</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\n// export const fetchData = () => {\r\n//     return fetch(url)\r\n//      .then(data => data.json())\r\n//         .then(response => response)\r\n//         .catch((error) => console.log(error))\r\n// }\r\n\r\nexport const fetchData = async (country) => {\r\n    \r\n    let modifiedURL= url\r\n    \r\n    if(country){\r\n        modifiedURL = `${url}/countries/${country}`\r\n    }\r\n    \r\n    try{\r\n        const { data : { confirmed, deaths, recovered, lastUpdate}} = await axios.get(modifiedURL);\r\n        return  { confirmed, deaths, recovered, lastUpdate}\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () =>{\r\n    try{\r\n        // const  {data}  = await fetch(`${url}/daily`).then(data => data.json())\r\n        const  { data }  = await axios.get(`${url}/daily`)\r\n        const modifiedData = data.map( dailyData => ({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths : dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n        return modifiedData\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const countries = async () => {\r\n    try{\r\n        const { data : { countries } } = await axios.get(`${url}/countries`)\r\n        // console.log(data)\r\n        return countries.map((country) => country.name)\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { fetchDailyData } from '../../api'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport styles from \"./Charts.module.css\"\r\n\r\nconst Charts = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n\r\n    const [dailyData, setDailyData] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData())\r\n        }\r\n        // console.log(dailyData)\r\n\r\n        fetchAPI()\r\n    },[]);\r\n    \r\n\r\n    const lineChart = (\r\n        dailyData[0] ? (\r\n          <Line\r\n            data={{\r\n              labels: dailyData.map(({ date }) => date),\r\n              datasets: [{\r\n                data: dailyData.map((data) => data.confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n              }, {\r\n                data: dailyData.map((data) => data.deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                fill: true,\r\n              },\r\n              ],\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n    \r\n    const barChart = (\r\n      confirmed ? (\r\n        <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n      ): null\r\n    )\r\n\r\n    return (\r\n\r\n        <div className={styles.container}>\r\n          {country ? barChart : lineChart}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Charts;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\n\r\nimport styles from './CountryPicker.module.css'\r\n\r\nimport { countries } from '../../api'\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n\r\n    const [ fetchedCoutries, setFetchedCountries ] = useState([])\r\n\r\n    useEffect( () => {\r\n        \r\n        const getCountries = async () => {\r\n            // const data = await countries()\r\n            // console.log(data)\r\n            setFetchedCountries(await countries())\r\n        }\r\n        \r\n        getCountries()\r\n    },[setFetchedCountries])\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCoutries.map( country => <option key={country} value={country}>{country}</option>\r\n                )}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport { Cards, Charts, CountryPicker } from './Components'\r\nimport { fetchData } from './api'\r\nimport styles from './App.module.css'\r\nclass App extends React.Component {\r\n    state = { \r\n        data :{},\r\n        country:\"\",\r\n     }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData()\r\n        this.setState({data:fetchedData,})\r\n    }\r\n\r\n    handleCountryChange = async(country) => {\r\n        const fetchedData = await fetchData(country)\r\n        this.setState({country:country, data:fetchedData,})\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state\r\n        return (\r\n            <div className={styles.container}>\r\n                <img src={\"https://i.ibb.co/7QpKsCX/image.png\"} \r\n                alt=\"Corona\" className={styles.image}/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Charts data={data} country={country}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__s7Giu\",\"image\":\"App_image__c9M2m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__3xiTQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1y6Ko\"};"],"sourceRoot":""}